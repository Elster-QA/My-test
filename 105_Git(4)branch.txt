РАБОТА С GIT:
ДОКУМЕНИАЦИЯ к Git(на РУС.)https://git-scm.com/book/ru/v2

***************Работа с ветками в Git (git branch)******************************

 ****СОЗДАНИЕ НОВ. ВЕТКИ Git (git branch)******
 1)в cmd пиш. git branch имяветки(в моем случ.first_branch)->НА ЛОК.МАШ.
 
 2)Проверка git branch (должно отобр. имя ветки)
 ...и отобразится наша ветка (зеленим) в которой мы сейчас работаем
 
 3)для переключения на нов. ветку в cmd пиш. git checkout имяветки
 ...должно отобразится Switched to branch 'first_branch'
 ...Проверка git branch (и зеленым должна подсвеч. наша новая ветка)

Добавляем новую строку к нашему FileOne.txt
++++++++++++++++ДОБАВЛЕНИЕ ЧЕРЕЗ CMD СТРОКИ в файл++++++++++++
+         echo "текст котр доб" >> FileOne.txt               +
++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
 
и комитиим их на лок. маш. и пушим в Гит
после чего у нас будет ошибка*, так как эта ветка(first_branch)
создана только на ЛОК.МАШ поэтому нам надо связят эту ветку(ЛОК.МАШ.) с веткой на (СЕРВЕРе)
*fatal...first_branch has no upstream branch.
  
****ОБЪЕДЕНЕНИЕ(СВЯЗЬ) ВЕТКОТ ЛОК. и СЕРВЕРной****
1)в cmd пиш. git push -u orign first_branch(имяветки)
...в Git-е у нас должна появится новая ветка
 
 ****НАПР. МЫ РАБОТАЛИ над КАКОЙ-ТО ФНУКЦ. в НОВ.ВЕТКИ 
      и ХОТИМ залить ЕЕ в ОСНОВНУЮ ветку СЕРВ.****
                                (MERGE)
1)Мы должны вернутся в нашу основную ветку git checkout -
...Проверяем git branch	
2)в cmd пиш. git merge first_branch ( имя той ветки КОТОРУЮ хотим влить в ОСНОВНУЮ(СЕРВ.))
...ОТОБРАЗИТСЯ:
"Updating b2ce0bc*..1f47f1e**
Fast-forward
 FileOne.txt | 2 +-
 1 file changed, 1 insertion(+), 1 deletion(-)"
*это хеш последнего комита в ОСН.ветке(MAIN)
**это хеш последнего комита в нашей доб. ветке(first_branch)

3)git status
...проверяем
4)и git push

************КОНФЛИКТЫ*********************
напр. на СЕРВ. был добавлен НОВ. файл, а в ЛОК. изменили какой то текуший файл
...Т.Е. РАЗСИНХРОН РЕПОЗИТОРИЕВ

1)Делаем все выше перечисленное
и добавляем новую ветку на ЛОК.МАШ.
git branch second_branch
...Проверяем git branch
...резул. 
  first_branch
* main
  second_branch
  
 2)переключаемся на новую ветку 
 git checkout second_branch
  
 ...и вней создаем новый файл"3)"
 
3)Добавляем НОВ.ФАЛЙ на ЛОК.МАШ.
  echo "test_line" >> second.file
....проверяем git status
(и у нас есть "modified:   FileOne.txt" и "Untracked files:second.file" )
нам нужно доб. second.file 
git add second.file
4)потом git commit -am "second.file"
5)git push -u origin second_branch

и потом пробуем провести MERGE в мастер(main)ветку
переходим в main(мастер) ветку git checkout main
...git branch(проверка)

и мержим(объединаем)
6)git merge second_branch

и пробуем пушить
7)git push
соответственно будет ошибка(потому что у нас есть не соответствия междк ЛОК.РЕП. и СЕРВ.)
...РЕШЕНИЕ:
1)git pull
2)и потом git push
...Т.Е. МЫ СИНХРОНИЗИРОВАЛИ НАШИ ФАЙЛЫ В ВЕТКАХ second_branch И main

**************************СЛЕД.ПРИМЕР************************************
В одном файле мы хотим внести изменения в ОДНУ и ТУЖЕ СТРОКУ
На ЛОК.РЕПЕ. и на УДАЛ.РЕПЕ(СЕРВ)
...КОГДА РЕЧЬ ИДЕТ О РАБОТЕ В РАЗНЫХ ВЕТКАХ!
1)изменяем файл в УДАЛ.РЕПЕ.
в ветке main в newfile.txt

2) в ЛОК.РЕПЕ. тоже изменяем ЭТОТ-ЖЕ файл(изменяем строку и СОХР.)

3) созд.НОВ. ветку git branch new_file_edit
...git branch(проверяем)

4) переходим на нее git checkout new_file_edit
5)и ком. git commit -am "TimeOO"
6)и пуш git push -u origin new_file_edit
...и мержим
7)переходим на main ветку git checkout main
8) git merge new_file_edit
и пуш

9)git push
10)...нужно поробывать и git pull
...и у нас возникает ОШИБКА!
потому что у нас есть изменения на ЛОК.РЕПЕ. и на УДАЛ.РЕПЕ.
РЕШЕНИЕ:
1) открываем наш файл(newfile.txt) на ЛОК.МАШ.
2)убираем оттуда ВСЕ лишнее:"HEAD","===","<<<"...
3)СОХРАН.
4)git add newfile.txt
5)git commit -am "New"
6)git push
ИТОГ: МЫ СОХРАНИЛИ ВСЕ ИЗМЕНЕНИЯ В ОБЕИХ ФАЙЛАХ(на ЛОК. и на УДАЛ.)

***************ИЗМЕНЕНИЕ НАЗВ. ВЕТКИ**********************

1)созд. НОВ. ВЕТКУ git branch имяветки(в моем случ.New_Name) 
2)ИЗМЕНЯЕМ git branch -m имяСТАРвет имяНОВвет
...прим. git branch -m New_Name old_name
3) git branch (проверка)

ВСЕ ПРОСТО! НО ЭТО БЫЛА ПУСТАЯ!!! ВЕТКА(без файлов)
А ЕСЛИ в ВЕТКИ ЕСТЬ ФАЙЛЫ?

1) git checkout old_name
...перех. в ветку

2) echo "file_old.txt" >> file_old.txt
...созд. в ней файл со строкой

3) git add file_old.txt 

4)git commit -am "old"

5)git push -u origin old_name
...пушим ветку на УДАЛ.РЕП.

git branch -m old_name star_name
...далее пробуем переименовать
ВРОДЕ КАК ПРОШЛО успешно, НО НА GitHub-e НАЗВАНИЕ НЕ ИЗМЕНИЛОСЬ!!!!

РЕШЕНИЕ:
1)git push origin :old_name
...Удаляем НАЗВАНИЕ старой ветки

2)git push -u origin star_name
...и пушим  ветку с НОВИМ НАЗВ.

***************УДАЛЕНИЕ ВЕТОК С ЛОК. РЕПОЗИТОРИЯ**********************

1) git checkout main
...переходим на main ветку

2)git branch -d назВЕТКИ

3) git branch
...проверяем

*******ВОЗВРАЩЕНИЕ УДАЛЕННОЙ ВЕТКИ С УДАЛ. РЕПОЗИТОРИЯ НА ЛОК.*********  
1) git fetch origin star_name (имя удаленной ветки)
2) git branch 
...проверяем ветки нет

3)git branch checkout star_name	
...надо перейти чтоб ОНА появилась				